println "tasks: $gradle.startParameter.taskNames"

enableFeaturePreview("GRADLE_METADATA")
// set some global variables
gradle.ext {
    kotlin_version = kotlin_version
    kotlinx_coroutines_version = '1.3.4'
    library_version = '0.0.5'
    android_version = 21
    android_target_version = 29
}

if (System.env.containsKey("EXAMPLE_AS_ROOT")) {
    gradle.ext.exampleAsRoot = Boolean.parseBoolean(System.env.EXAMPLE_AS_ROOT)
    println "System env EXAMPLE_AS_ROOT set to $System.env.EXAMPLE_AS_ROOT, using $gradle.ext.exampleAsRoot"
} else {
    // load some more from local.properties or set defaults.
    def props = new Properties()
    def propfile = file("../local.properties")
    if (propfile.exists()) {
        propfile.withInputStream { props.load(it) }
        gradle.ext.exampleAsRoot = Boolean.parseBoolean(props["exampleAsRoot"])
        println "local.properties read (exampleAsRoot=${props['exampleAsRoot']}, using $gradle.ext.exampleAsRoot)"
    } else {
        gradle.ext.exampleAsRoot = false
        println "local.properties not found, using default values (exampleAsRoot=$gradle.ext.exampleAsRoot)"
    }
}


// based on https://github.com/Kotlin/xcode-compat/blob/d677a43edc46c50888bca0a7890a81f976a42809/xcode-compat/src/main/kotlin/org/jetbrains/kotlin/xcodecompat/XcodeCompatPlugin.kt#L16
def sdkName = System.getenv("SDK_NAME") ?: "unknown"
if (sdkName.startsWith("iphoneos")) {
    gradle.ext.ios_primary_arch = "iosarm64"
    gradle.ext.ios_secondary_arch = "iosx64"
}
else {
    gradle.ext.ios_primary_arch = "iosx64"
    gradle.ext.ios_secondary_arch = "iosarm64"
}

println("Detected primary arch from sdk $sdkName: $gradle.ext.ios_primary_arch")


// set global variable to decide how many iOS source sets to use. More than one sourceset can create problems for project dependencies and gives false errors in the IDE
// currently the xcodecompat plugin also supports only arm64/iosx64 so this is off by default
// it is automatically enabled when publishing, in order to generate multiple artifacts
def envFlag = System.env.IOS_ONE_SOURCESET
boolean isPublishTask = gradle.startParameter.taskNames.any  { it.startsWith("publish") }
gradle.ext.ios_one_sourceset = envFlag == null ? !isPublishTask : Boolean.parseBoolean(envFlag)
println "Using a single iOS sourceset (env IOS_ONE_SOURCESET=$envFlag, isPublishTask=$isPublishTask): $gradle.ext.ios_one_sourceset"
